#!/bin/csh

set echo on

gunzip ../tteftu_with_tRNA.pdb.gz

sxpdb2em.py ../tteftu_with_tRNA.pdb tmp.hdf --apix=5.2 --box=64

e2proc3d.py tmp.hdf ../fmodel_structure.hdf --process=filter.lowpass.tanh:cutoff_abs=0.15:fall_off=0.2

e2proc3d.py tmp.hdf ../model_structure.hdf --process=filter.lowpass.tanh:cutoff_abs=0.45:fall_off=0.1

rm tmp.hdf

# Generating 2D projections of a 3D model from an input hdf file.
# It simulates the procedure of EM image acquisition process.
# The output projections were disturbed with Gaussian noise.
sxprocess.py ../model_structure.hdf particles mic --generate_projections apix=5.2

# Before proceeding to automated particle picking mode, it is suggested that the user 
# first use e2boxer in the interactive mode to determine the desired parameters by
# first invoking e2boxer with the --gui option and a micrograph file name:

#e2boxer.py --gui mic0.hdf &

# Choose "Gauss" in the drop down menu for "Current Boxing Tool," set desired parameters, and 
# click on "Run" to pick particles.
# There should be a window displaying the picked particles. To reset or "unpick" the 
# particles, click on "Clear Boxes".
# Click on the "Write output" button to save the particles selected for mic0.hdf. 
# By default the particles file will be saved to bdb:particles/mic0_ptcls. 
 
# Note that if you saved any particles file under its default name in e2boxer, 
# make sure to delete it to avoid conflict later in the automated mode. 
# For example, if the particles selected for mic0.hdf was
# saved to bdb:particles/mic0_ptcls, delete it as follows:

#cd particles
#e2bdb.py bdb:mic0_ptcls --delete
#cd ..

sxprocess.py demoparms --makedb 'gauss_width'=1.0:'pixel_input'=5.2:'pixel_output'=5.2:'thr_low'=4.0:'thr_hi'=60.0:"invert_contrast"=False:"use_variance"=True:"boxsize"=64
e2boxer.py --gauss_autoboxer=demoparms --write_ptcl --boxsize=64 --norm=normalize.ramp.normvar mic*.hdf --format=bdb
e2bdb.py bdb:particles\#mic0_ptcls bdb:particles\#mic1_ptcls bdb:particles\#mic2_ptcls bdb:particles\#mic3_ptcls bdb:particles\#mic4_ptcls --makevstack=bdb:data

sxheader.py bdb:data --params=active --one
sxheader.py bdb:data --params=xform.align2d --zero
# pre-align particles with sxali2d.py
sxali2d.py bdb:data None --ou=28 --xr="2 1" --ts="1 0.5" --maxit=33 --dst=90mpirun -np 16 sxisac.py bdb:data --stab_ali=2 --init_iter=1 --main_iter=1 --match_second=1 --ou=30 --max_round=5 --img_per_grp=60 --thld_err=0.75 --generation=1 --MPI    || exit

# apply the results from sxali2d.py to the data:
sxtransform2d.py bdb:data bdb:stack_ali

# run sxisac.py
mpirun -np 16 sxisac.py bdb:stack_ali --stab_ali=2 --init_iter=1 --main_iter=1 --match_second=1 --ou=30 --max_round=5 --img_per_grp=60 --thld_err=1.75 --generation=1 --MPI


###################################################################<<<<<<< run_through_example
# ISAC run with parameters given above is not sufficiently restrictive for EM data. Instead, one may try to use default parameters, in which case
#   the program will be more stringent, but will run significantly longer.
# In particular, parameters --ou and --thld_err should be adjusted according to the data.
# The ISAC program is designed to run in multiple generations: we first run the first generation on the data set, 
#   which will generate initial class averages. 
# We call the particles that are assigned to these class averages accounted for and set them aside. 
# We will make a stack of the unaccounted for particles and run the second 
#   generation on this stack. Then we set aside the particles that are accounted for 
#   in the second generation and make a new stack for the particles that are still unaccounted for. 
# The program is designed to use four generation for the full run. The process repeated 
#   until no or very few class averages can be generated in one generation. The parameter 
#   generation is used to tell the program which generation is currently used.
#
# mpirun -np 4 sxisac.py bdb:data --ou=30 --thld_err=1.0 --generation=1 --MPI
# e2bdb.py bdb:data --makevstack=bdb:flip_data_2 --list="generation_1_unaccounted.txt"
# mpirun -np 4 sxisac.py bdb:data_2 --ou=30 --thld_err=1.0 --generation=2 --MPI
# e2bdb.py bdb:data --makevstack=bdb:flip_data_3 --list="generation_2_unaccounted.txt"
# mpirun -np 4 sxisac.py bdb:data_3 --ou=30 --thld_err=1.0 --generation=3 --MPI
# e2bdb.py bdb:data --makevstack=bdb:flip_data_4 --list="generation_3_unaccounted.txt"
# mpirun -np 4 sxisac.py bdb:data_4 --ou=30 --thld_err=1.0 --generation=4 --MPI
#
# To run gui version of sxisac, enter the following in the command line:
# 	sxgui.py --demo=mpibdb &
# and then press the 'sxisac' button in the main menu. A separate window will pop up 
#  with the input fields already initialized to the proper values. 
# Press the green 'Run sxisac' button to execute the command.
# Note that if sxgui.py is invoked without the --demo option, the input fields 
#  will not be automatically initialized with the approprite values, in 
#  which case the proper values must be entered manually.
###################################################################
sxcpy.py class_averages_generation_*.hdf bdb:class_averages



###################################################################
# Determine the initial structure using class averages and random initialization.
# Please examine the result (outdirshc/volume_filt.hdf) and compare with
#  the original model (../model_structure.hdf).  If the ab initio structure does
#  not look like the starting model (as judged by eye, we have better measures, to be included
#  here shortly), please repeat the sequence of commands starting from sxheader.py.
###################################################################

sxheader.py bdb:class_averages --params=active --one
#  First version, so-so
#sxheader.py bdb:class_averages --params=xform.projection --rand_alpha
#sxrecons3d_n.py  bdb:class_averages  junk.hdf
#e2proc3d.py junk.hdf init1.hdf --process=filter.lowpass.tanh:cutoff_abs=0.15:fall_off=0.2
#rm -f junk.hdf
#rm -rf outdirshc
#mpirun -np 12 sxali3d.py bdb:class_averages init1.hdf outdirshc --shc --ou=28 --xr=3.0 --delta=2.0 --maxit=100 --function="[..,demo_user_funcs,ali3d_reference2]" --MPI

# Second, more advanced version.  Note this one requires number of CPUs to be multiplicity of 3.
sxheader.py bdb:class_averages --params=stable --zero
mpirun -np 12 sxviper.py bdb:class_averages outdirshc --ou=28 --xr=3.0 --delta=2.0 --function="[..,demo_user_funcs,ali3d_reference2]"


# 3D projection alignment - refinement of the initial structure
sxheader.py bdb:data --params=xform.projection --zero
sxheader.py bdb:data --params=active --one

#  establish initial orientations of all projection data
mpirun -np 12 sxali3d.py bdb:data outdirshc/volf.hdf outmatch --maxit=1 --ou=28 --xr=3.0 --delta=2.0 --MPI
sxheader.py bdb:data --params=xform.projection --export=outmatch/matchparams.txt
mpirun -np 12 sxali3d.py bdb:data outdirshc/volf.hdf poutdirshc --shc --ou=28 --xr=2.0 --delta=2.0 --maxit=100 --function="[..,demo_user_funcs,ali3d_reference3]" --MPI

# Refinement of the 3D structure using high accuracy "local" alignment
mpirun -np 12 sxlocal_ali3d.py bdb:data ali3d_e --ou=30 --delta=2 --ts=2 --maxit=3 --chunk=0.25 --function="[..,demo_user_funcs,localali3d_reference3]" --center=0 --MPI
###################################################################
# To run gui version, enter the following in the command line:
# 	sxgui.py --demo=mpibdb &
# and then press the 'sxlocal_ali3d' button in the main menu. A separate window will pop up with the input fields already initialized to the proper values. 
# Press the green 'Run sxlocal_ali3d' button to execute the command.
# Note that if sxgui.py is invoked without the --demo option, the input fields will not be automatically initialized with the approprite values, in 
# which case the proper values must be entered manually.
###################################################################

