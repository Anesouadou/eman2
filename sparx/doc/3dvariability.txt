= Name =
sx3dvariability - 3D Variablity Estimation: Calculate 3D variability using a set of aligned projection images as an input.

= Usage =


''usage in command line''

sx3dvariability.py  prj_stack  --ave2D=ave2D  --var2D=var2D  --ave3D=ave3D  --var3D=var3D  --img_per_grp=img_per_grp  --no_norm  --radiusvar=radiusvar  --npad=npad  --sym=symmetry  --fl=fl  --aa=aa  --CTF  --VERBOSE  --VAR  --SND  --symmetrize



=== Typical usage ===

sx3dvariability exists only in MPI version.


for asymmetric structure:

''' mpirun -np 472 sx3dvariability.py stack --CTF --img_per_grp=100 --fl=0.25 --aa=0.1 --ave3D=vol.hdf --var3D=var_vol.hdf '''

for structures that have symmetries:

''' sx3dvariability.py stack --symmetrize --sym=c2 ''' 

''' mpirun -np 472 sx3dvariability.py bdb:sdata --CTF --img_per_grp=100 --fl=0.25 --aaf=0.1 --ave3D=vol.hdf --var3D=var_vol.hdf --sym=c2 ''' 


== Input ==
    prj_stack:: Input image stack: The images must containt the 3D orientation parameters in the header and optionally CTF information. (default required string)

    fl:: Low-pass filter frequency [1/Pixel]: Filter to be applied to the images prior to variability calculation. By default, no filtering. (default 0.0)
    aa:: Low-pass filter fall-off: Filter to be applied to the images prior to variability calculation. By default, no filtering. (default 0.0) 
    CTF:: Use CTF: If set to true, the a CTF correction will be applied using the parameters found in the image headers. (default False) 
    img_per_grp:: Number of projections: from the angular neighborhood that will be used to estimate 2D variance for each projection data. The larger the number the less noisy the estimate, but the lower the resolution. Usage of large number also results in rotational artifacts in variances that will be visible in 3D variability volume. (default 10)
    symmetrize:: Symmetrize input stack: This preparation step is required when the structure has internal symmetry. (default False)
    sym:: Point-group symmetry: Only required if the structure has symmetry higher than c1. Notice this step can be run with only one CPU and there is no MPI version for it. (default c1)

    * The remaining parameters are optional.
    no_norm:: Skip normalization: (default False)
    radiusvar:: Radius for 3D variability [Pixels]: (default -1)
    npad:: number of time to pad the original images: (default 2)
    VAR:: stack on input consists of 2D variances: (default False)
    SND:: Squared normalized differences: If set to true, it computes the squared normalized differences. (default False)

    VERBOSE:: Verbose: Useful for debugging. (default False) 


== Output ==
    ave2D:: Output 2D averages: (default none)
    var2D:: Output 2D variances: (default none)
    ave3D:: Output 3D average: 3D reconstruction computed from projections averaged within respective angular neighborhood. It should be used to assess the resolvability and possible artifacts of the variability map. (default none)
    var3D:: Output 3D variability: It creates a volume containing, for each voxel, a measure of the variability in the dataset. Careful, time consuming! (default none)


= Description =
The program calculates the variability observed in a collection of image projections. Dtructures with symmetry require preparing data before calculating the variability. The data preparation step would symmetrize the data and output a bdb:sdata for variability calculation. sx3dvariability.py can be slow.

= Method =

= Reference =

= Author / Maintainer =
Pawel Penczek

= Keywords =
 category 1:: APPLICATIONS

= Files =
sx3dvariability.py

= See also =

= Maturity =
 alpha::     it works.

= Bugs =
Did not discover any yet.
