= Name =
sxviper - Validated ''ab initio'' 3D structure determination, aka Validation of Individual Parameter Reproducibility. The program is designed to determine a validated initial intermediate resolution structure using a small set (<100?) of class averages produced by ISAC [[sxisac]]. 

= Usage =


''usage in command line''

sxviper.py stack  directory  --ir=inner_radius --radius=outer_radius --rs=ring_step --xr=x_range --yr=y_range --mask3D=mask3D --moon_elimination=moon_elimination --ts=translational_search_step  --delta=angular_step --center=center_type --maxit1=max_iter1 --maxit2=max_iter2 --L2threshold=0.1 --ref_a=S --sym=c1 --nruns=nruns --doga=doga --fl=fl --aa=aa --pwreference=pwreference --debug


=== Typical usage ===

sxrviper exists only in MPI version.

''' mpirun --npernode 16 -np 24 --host node1,node2 sxviper.py  stack output_directory --fl=0.25 --radius=30 --xr=2 --moon_elimination=750,4.84 '''

A fast track option, that can be used to choose parameters in the appropriate ranges (for example, obtaining adequate spatial frequency filtering '--fl') is provided below. Since it employs extreme values for some parameters this command can be used only for parameter tuning for the VIPER algorithm. 

''' mpirun --npernode 16 -np 16 --host node1 sxviper.py  stack output_directory --fl=0.25 --radius=30 --xr=1 --nruns=2   --L2threshold=1.0e300  --doga=-1'''

The VIPER program needs MPI environment to work properly. Number of used MPI processes MUST BE a multiple of --nruns (default = 6). 

Since VIPER makes use of group of processors working together, it is important from a time efficiency point of view to have processors within a group being allocated on the same node. This way any data exchange within the group does not use network traffic. The "--npernode" option of mpirun is useful in accomplishing this goal. As shown in the example below when "--npernode" is used  mpi allocates the ranks of the processors sequentially, not moving to the next node until the current one is filled.  If "--npernode" is not used then processors are allocated in a round robin fashion (i.e. jumping to the next node with each allocation). Since in VIPER, groups contain consecutively ranked processors, it is important to provide  "--npernode XX" where XX is the number of processors per node.

{{attachment:npernode_rank.png||width=600}}


== Input ==
    stack:: 2D images in a stack file: (default required string)

    radius:: radius of the particle: has to be less than < int(nx/2)-1 (default required int)

    * The remaining parameters are optional.
    xr:: range for translation search in x direction: search is +/xr in pixels (default 0)
    yr:: range for translation search in y direction: if omitted will be set to xr, search is +/yr in pixels (default 0)
    mask3D:: 3D mask file: (default sphere)
    moon_elimination:: elimination of disconnected pieces: two arguments: mass in KDa and resolution in px/A separated by comma, no space (default none)

    ir:: inner radius for rotational search: > 0 (default 1)
    rs:: step between rings in rotational search: >0 (default 1)
    ts:: step size of the translation search in x-y directions: search is -xr, -xr+ts, 0, xr-ts, xr, can be fractional (default 1)
    delta::  angular step of reference projections: (default 2)
    center:: centering of 3D template: average shift method; 0: no centering; 1: center of gravity (default -1)
    maxit1:: maximum number of iterations performed for the GA part: (default 400)
    maxit2:: maximum number of iterations performed for the finishing up part: (default 50)
    L2threshold:: stopping criterion of GA: given as a maximum relative dispersion of volumes' L2 norms: (default 0.03)
    ref_a:: method for generating the quasi-uniformly distributed projection directions: (default S)
    sym:: point-group symmetry of the structure: (default c1)
    nruns:: GA population: aka number of quasi-independent volumes (default 6)
    doga:: do GA when fraction of orientation changes less than 1.0 degrees is at least doga: (default 0.1)
    fl:: cut-off frequency applied to the template volume: using a hyperbolic tangent low-pass filter (default 0.25)
    aa:: fall-off of hyperbolic tangent low-pass filter: (default 0.1)
    pwreference:: text file with a reference power spectrum: (default none)
    debug:: debug info printout: (default False)


== Output ==
    directory:: output directory name: into which the results will be written (if it does not exist, it will be created, if it does exist, the results will be written possibly overwriting previous results) (default required string)


= Description =
 * This program uses a user defined projection angle and translation shift to perform 3D reconstruction. The translation shifts, and step are not limited to integer number. For a given delta, the program will perform maxit round refinement. So the final refinement iteration is maxit*(number of delta values) 
 * For the program to work, attributes xform.projection (Transform object containing three Euler angles and two in-plane shifts) have to be set in the header of each file.  If their values are not known, all should be set to zero.  
 * The program will start alignment from the current alignment parameters xform.projection stored in file headers. 
 * The program only change the alignment parameters in their header. The images in stack keep untouched. ( Neither rotated nor shifted. )

= Method =

= Reference =


= Author / Maintainer =
Pawel A. Penczek

= Keywords =
 category 1:: APPLICATIONS

= Files =
sparx/bin/sxviper.py

= See also =
[[sxrviper]]

= Maturity =
 beta::     works for author, often works for others.

= Bugs =
Did not discover any yet.
