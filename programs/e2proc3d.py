#!/bin/env python

# $Id$

# todo: verify the filters who have the same names in proc3d
#       and proc2d have the same implementation
#
# todo: lp, hp, tlp vs apix

from EMAN2 import *
from optparse import OptionParser
import sys
import os.path

def print_iminfo(data, label):
    print "%s image : %dx%dx%d Mean=%1.3g Sigma=%1.3g Min=%1.3g Max=%1.3g" % \
    (label, data.get_xsize(), data.get_ysize(), data.get_zsize(),
     data.get_mean(), data.get_sigma(), data.get_min(), data.get_max())


def main():
    progname = os.path.basename(sys.argv[0])
    usage = progname + " options inputfile outputfile"
    parser = OptionParser(usage)

    parser.add_option("--shrink", type="int", action="append", 
                      help="Shrinks the image by integer n using median filter")

    parser.add_option("--scale", type="float", action="append",
                      help="Rescales the image, generally used with clip= ")

    parser.add_option("--clip", type="float", nargs=6, action="append",
                      help="Make the output have this size, no scaling. CLIP=x,y,z,xc,yc,zc")

    parser.add_option("--fftclip", type="float", nargs=3, action="append",
                      help="Make the output have this size, rescaling by padding FFT. FFTCLIP=x,y,z")

    parser.add_option("--filter", type="string", action="append",
                      help="Apply a filter. FILTER=filtername:param1=val1:param2=val2")
    
    parser.add_option("--apix", type="float", help="Specify the Angstrom/pixel for S scaling")

    parser.add_option("--origin", type="float", nargs=3,
                      help="Set the coordinates for the pixel (0,0,0). ORIGIN=x,y,z")

    parser.add_option("--mult", type="float", help="Scales the densities in the output")

    parser.add_option("--add", type="float", help="Adds a constant to the densities")
    
    parser.add_option("--calcsf", type="string", 
                      help="Calculate a radial structure factor. Must specify apix.")

    parser.add_option("--tophalf", action="store_true",
                      help="The output only keeps the top half map")

    parser.add_option("--icos5fhalfmap", action="store_true",
                      help="The input is the icos 5f top half map generated by the 'tophalf' option")

    parser.add_option("--outtype", type="string",
                      help="Set output image format, mrc, imagic, hdf, etc")
    
    append_options = ["clip", "fftclip", "filter", "shrink", "scale"]

    optionlist = get_optionlist(sys.argv[1:])

    (options, args) = parser.parse_args()
    
    if len(args) != 2:
        print "usage: " + usage
        print "Please run '" + progname + " -h' for detailed options"
        sys.exit(1)
    
    infile = args[0]
    outfile = args[1]

    index_d = {}
    for append_option in append_options:
        index_d[append_option] = 0

    data = EMData()
    data.read_image(infile)
    
    x = data.get_xsize()
    y = data.get_ysize()
    z = data.get_zsize()
    
    xc = x/2
    yc = y/2
    zc = z/2

    nx = x
    ny = y
    nz = z

    print_iminfo(data, "Original")

    apix = -1
    if options.apix:
        apix = options.apix
        data.set_xpixel(apix)
        data.set_ypixel(apix)
        data.set_zpixel(apix)
    
    for option1 in optionlist:                
        if option1 == "origin":
            (originx, originy, originz) = options.origin
            data.set_xyz_origin(originx, originy, originz)
            
        elif option1 == "calcsf":
            dataf = data.do_fft()
            curve = dataf.calc_radial_func(y, 0, 0.5)
            Util.save_data(0, 1.0/(apix*2.0*y), curve, options.calcsf);

        elif option1 == "filter":
            fi = index_d[option1]
            (filtername, param_dict) = parse_filter_params(options.filter[fi])
            d.filter(filtername, param_dict)
            index_d[option1] += 1

        elif option1 == "mult":
            data.mult(options.mult)

        elif option1 == "add":
            data.add(options.add)

        elif option1 == "clip":
            ci = index_d[option1]
            (nx, ny, nz, xc, yc, zc) = options.clip[ci]
            
            if not (xc>=0 and yc>=0 and zc>=0 and xc<x and yc<y and zc<z):
                xc = x/2
                yc = y/2
                zc = z/2

            if x != nx or y != ny or z != nz:
                data = data.get_clip(Region(xc-nx/2,yc-ny/2,zc-nz/2,nx,ny,nz))
            index_d[option1] += 1
            
        elif option1 == "scale":
            scale_f = options.scale[index_d[option1]]
            if scale_f != 1.0:
                data.scale(scale_f)
            index_d[option1] += 1

        elif option1 == "shrink":
            shrink_f = options.shrink[index_d[option1]]
            if shrink_f > 1:
                data.median_shrink(options.shrink)
                nx = data.get_xsize()
                ny = data.get_ysize()
                nz = data.get_zsize()
            index_d[option1] += 1
            
        elif option1 == "fftclip":
            fi = index_d[option1]
            (fnx, fny, fnz) = options.fftclip[fi]
            fft = data.do_fft()
            padfft = fft.clip(Region(0, 0, 0, fnx+2, fny, fnz))
            data = padfft.do_ift()
            index_d[option1] += 1
            
        elif option1 == "icos5fhalfmap":
            print "not implemnted yet"

        elif option1 == "tophalf":
            half = data.get_top_half()
            data = half
            
        elif option1 == "outtype":            
            data.write_image(outfile, 0, EMUtil.get_image_ext_type(options.outtype))

    print_iminfo(data, "   Final")
    

if __name__ == "__main__":
    main()
    

