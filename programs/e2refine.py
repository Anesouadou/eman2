#!/usr/bin/env python

#
# Author: Steven Ludtke, 02/03/2007 (sludtke@bcm.edu)
# Copyright (c) 2000-2007 Baylor College of Medicine
#
# This software is issued under a joint BSD/GNU license. You may use the
# source code in this file under either license. However, note that the
# complete EMAN2 and SPARX software packages have some GPL dependencies,
# so you are responsible for compliance with the licenses of these packages
# if you opt to use BSD licensing. The warranty disclaimer below holds
# in either instance.
#
# This complete copyright notice must be included in any revised version of the
# source code. Additional authorship citations may be added, but existing
# author citations must be preserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  2111-1307 USA
#
#


from EMAN2 import *
from optparse import OptionParser
from math import *
import os
import sys

def main():
	progname = os.path.basename(sys.argv[0])
	usage = """%prog [options] 
	EMAN2 iterative single particle reconstruction"""
	parser = OptionParser(usage=usage,version=EMANVERSION)
	
	
	# options associated with e2project3d.py
	parser.add_option("--prop", dest = "prop", type = "float", help = "The proportional angular separation of projections in degrees")
	parser.add_option("--sym", dest = "sym", help = "Specify symmetry - choices are: c<n>, d<n>, h<n>, tet, oct, icos")
	parser.add_option("--projector", dest = "projector", default = "standard",help = "Projector to use")
	parser.add_option("--numproj", dest = "numproj", type = "float",help = "The number of projections to generate - this is opposed to using the prop argument")
	
	# options associated with e2simmx.py
	parser.add_option("--simalign",type="string",help="The name of an 'aligner' to use prior to comparing the images", default=None)
	parser.add_option("--simaligncmp",type="string",help="Name of the aligner along with its construction arguments",default="dot")
	parser.add_option("--simralign",type="string",help="The name and parameters of the second stage aligner which refines the results of the first alignment", default=None)
	parser.add_option("--simraligncmp",type="string",help="The name and parameters of the comparitor used by the second stage aligner. Default is dot.",default="dot")
	parser.add_option("--simcmp",type="string",help="The name of a 'cmp' to be used in comparing the aligned images", default="dot:normalize=1")
	
	# options associated with e2classify.py
	parser.add_option("--sep", type="int", help="The number of classes a particle can contribute towards (default is 2)", default=2)
	
	# options associated with e2classaverage.py
	parser.add_option("--classkeep",type="float",help="The fraction of particles to keep in each class, based on the similarity score generated by the --cmp argument. Toggle the keepsig flag to change the keeping criterion from fraction-based to sigma-based. Particle exclusion is conservative, meaning if keep is 0.94 and there are 10 particles in the class than none are excluded. In the same vein, if keep were 0.84 then only one particle would excluded etc. Default is 1.0.",default=1.0)
	parser.add_option("--classkeepsig", action="store_true", dest="keepsig", default=False, help="Change the keep (\'--keep\') criterion from fraction-based to sigma-based. In this approach all of the similarity scores are treated like a distribution. Scores at one extreme of the distribution are the best scores, scores at the other end of the distribution are the worst. Thus, the middle of the distribution (the mean) does not represent the best score. Specifying a --keep value of 1 will exclude all particles with similarity scores further than 1 standard deviation from the mean. Default is off.")
	parser.add_option("--classiter", type="int", help="The number of iterations to perform. Default is 1.", default=1)
	parser.add_option("--classalign",type="string",help="If doing more than one iteration, this is the name and parameters of the 'aligner' used to align particles to the previous class average. See \'e2help.py aligners\'. And example is \'--align=translational:maxshift=2\'. Default is None.", default=None)
	parser.add_option("--classaligncmp",type="string",help="If doing more than one iteration, this is the name and parameters of the comparitor used by the fist stage aligner (specified with the \'--align\' argument) for determining the optimum alignment parameters. See \'e2help.py cmp\'. An example is \'--aligncmp=frc\'. Default is dot.",default="dot:normalize=1")
	parser.add_option("--classralign",type="string",help="Almost the same as the \'--align\' argument, this is the name and parameters of the second stage aligner which refines the results of the first alignment. Only applicable if doing more than one iteration. See \'e2help.py aligners\'. Typically the \'refine\' aligner is used. If this argument is not specified then no refinement of the alignment occurs. Default is None.", default=None)
	parser.add_option("--classraligncmp",type="string",help="The name and parameters of the comparitor used by the second stage (\'--ralign\') aligner. See \'e2help.py cmp\'. An example is \'--raligncmp=phase\'. Default is dot.",default="dot:normalize=1")
	parser.add_option("--classaverager",type="string",help="Name and parameters of the averager used to generate the class average. See \'e2help.py averagers\'. An example is \'--averager=ctfcw\'. Default is \'image\'.",default="image")
	parser.add_option("--classcmp",type="string",help="The name and parameters of the comparitor used to generate similarity scores, which is the basis of excluding particles from the class average. The similarity score is generated by comparing the aligned particle to the class average. See \'e2help.py cmp\'. An example is \'--cmp=SqEuclidean\'. Default is \'dot:normalize=1\'", default="dot:normalize=1")
	
	
	#options associated with e2make3d.py
	parser.add_option("--pad", type=int, dest="pad", help="To reduce Fourier artifacts, the model is typically padded by ~25% - only applies to Fourier reconstruction")
	parser.add_option("--recon", dest="recon_type", default="fourier", help="Reconstructor to use see e2help.py reconstructors -v")
	parser.add_option("--hard", type=float, dest="hard", default=0, help="This specifies how well the class averages must match the model to be included")
	
	(options, args) = parser.parse_args()
	
	os.
	
if __name__ == "__main__":
    main()