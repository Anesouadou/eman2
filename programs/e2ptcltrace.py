#!/usr/bin/env python

#
# Author: David Woolford, 5/27/2008 (woolford@bcm.edu)
# Copyright (c) 2000-2007 Baylor College of Medicine
#
# This software is issued under a joint BSD/GNU license. You may use the
# source code in this file under either license. However, note that the
# complete EMAN2 and SPARX software packages have some GPL dependencies,
# so you are responsible for compliance with the licenses of these packages
# if you opt to use BSD licensing. The warranty disclaimer below holds
# in either instance.
#
# This complete copyright notice must be included in any revised version of the
# source code. Additional authorship citations may be added, but existing
# author citations must be preserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  2111-1307 USA
#
#

# e2stacksort.py  01/03/07  Steven Ludtke
# This program will sort a stack of images based on some similarity criterion


from EMAN2 import *
from optparse import OptionParser
from math import *
import os
import sys


def main():
	progname = os.path.basename(sys.argv[0])
	usage = """%prog [options]
	
This program performs functions based on the idea of tracing particle orientations as they change/move around during the process of iterative Single Particle Reconstruction. It will use this information to do bad particle culling based on average total movement (in one dimensional degrees). NOT YET FULLY FUNCTIONAL.
 
Currently only works for eman1data that is generated by ptcltrace
"""

	parser = OptionParser(usage=usage,version=EMANVERSION)

	parser.add_option("--eman1data",type="string",help="The name of file(s) containing eman1 output as generated by eman1's ptcltrace", default=None)
	parser.add_option("--sym",type="string",help="The symmetry to be used to nearness testing and, if it is specified, reduction", default="c1")
	parser.add_option("--convergence",type="int",help="A threshold which is used to test for convergence",default=-1)
	parser.add_option("--dtheta",type="float",help="The change in angle threshold that is used to determine convergence",default=False)
	parser.add_option("--outfilead",type="string",help="The angular deviations data file to write out, in ascii format",default=None)
	parser.add_option("--outfilead_reduce",type="string",help="The angular deviations data file to write out, in ascii format",default=None)
	
	(options, args) = parser.parse_args()
	
	if options.eman1data != None:
		done = False
		s = str(options.eman1data)
		filenames = []
		while not done:
			idx =  s.find(',')
			if idx == -1:
				filenames.append(s)
				done = True
			else:
				filenames.append(s[0:idx])
				s = s[(idx+1):]
				#exit(1)		
		
		print "parsing data"
		orienttracedata = []
		classtracedata = []
		for filename in filenames:
			parsedata(filename,orienttracedata,classtracedata)
			print "there are a total of",len(orienttracedata),"particles"
			#print orienttracedata,classtracedata
			
		if options.convergence <= 1:
			print "error, you must specify a positive convergence value greater than 1"
			exit(1)
		if options.convergence > len(classtracedata[0]):
			print "error, convergence must be less than or equal to the total iterations in the particle trace data"
			exit(1)
		if options.dtheta <= 0:
			print "error, you must specify a positive, non zero dtheta"
			exit(1)
		
		print "writing out converged data to good.lst"
		good=open('good.lst','w')
		good.write("#LST\n")
		good_data = open('good_data.txt','w')
		good_data.write("#e2ptcltrace.py data file\n")
		detect_convergence(options.convergence,options.dtheta,orienttracedata,classtracedata,good,good_data)
		good.close()
		good_data.close()
		
		if options.sym != "c1":
			print "you specified a symmetry, now I am reducing"
			sym = Symmetries.get(options.sym)
			reduce(orienttracedata,sym)
			
			print "writing out converged, reduced data to eq_good.lst, using dtheta",options.dtheta
			good=open('eq_good.lst','w')
			good.write("#LST\n")
			good_data = open('eq_good_data.txt','w')
			good_data.write("#e2ptcltrace.py data file\n")
			detect_convergence(options.convergence,options.dtheta,orienttracedata,classtracedata,good,good_data)
			good.close()
			good_data.close()
		
		print "writing remaining particles as bad.lst"
		bad=open('bad.lst','w')	
		bad.write("#LST\n")
		bad_data = open('bad_data.txt','w')
		bad_data.write("#e2ptcltrace.py data file\n")
		write_data(orienttracedata,classtracedata,bad,bad_data)
		bad.close()
		bad_data.close()
		
	E2n=E2init(sys.argv)
	E2end(E2n)

def write_data(data,classdata,good,good_data):
	soln_idx = []
	for i in range(len(classdata[0])):
		soln_idx.append(i)
	print "the soln_idx is",soln_idx
	for number,d in enumerate(data):
		if len(d) == 0:
			continue
		
		good.write(str(number) + "\tstart.hed\n")
				
		good_data.write(str(number) + '. ********\n')
		good_data.write(str(classdata[number][i][0]) +" -> "+str(classdata[number][i][1])+ " (" + str(d[i][0])+","+str(d[i][1])+","+str(d[i][2])+")\n")
		for k,idx in enumerate(soln_idx):
			good_data.write(str(classdata[number][idx][0]) + " -> "+str(classdata[number][idx][1])+ " (" + str(d[idx][0])+","+str(d[idx][1])+","+str(d[idx][2])+")\n")
	
		d = [[]]
		data[number] = []



def detect_convergence(converge,dtheta,data,classdata,good,good_data,debug=False):
	
	m = converge
	n = 0
	i = 0
	## a temporary hack, this value should be known
	while n <= 0 and i < len(data):
		n = len(data[i])
		i += 1
		
	if n == 0: return
	
	
	limit = (n-m)+1
	
	for number,d in enumerate(data):
		if len(d) == 0:
			continue
		solution = []
		for i in range(0,limit):
			seed = d[i]
			soln_idx = []
			angle_solns = []
			angle_sum = 0
			while len(soln_idx) != (m-1):
				closest = -1
				idx = -1
				for j in range(i+1,n):
					if j in soln_idx:
						continue
					o2 = d[j]
					angle = angular_deviation_from_orient(seed,o2)
					if closest == -1 or angle < closest:
						closest = angle
						idx = j
				
				
				seed = d[idx]
				soln_idx.append(idx)
				#print closest
				angle_sum += closest
				angle_solns.append(closest)
			
			# determine the average angular separation
			angle_sum /= (m-1)
			if angle_sum <= dtheta:
				
				good.write(str(number) + "\tstart.hed\n")
				
				good_data.write(str(number) + '. ********\n')
				good_data.write(str(classdata[number][i][0]) +" -> "+str(classdata[number][i][1])+ " (" + str(d[i][0])+","+str(d[i][1])+","+str(d[i][2])+")\n")
				for k,idx in enumerate(soln_idx):
					good_data.write(str(classdata[number][idx][0]) + " -> "+str(classdata[number][idx][1])+ " (" + str(d[idx][0])+","+str(d[idx][1])+","+str(d[idx][2])+")\t"+str(angle_solns[k])+"\n")
			
				d = [[]]
				data[number] = []
				break

def angular_deviation_from_orient(o1,o2):
	t1 = Transform({"type":"eman","az":o1[1],"alt":o1[0],"phi":o1[2]})
	t2 = Transform({"type":"eman","az":o2[1],"alt":o2[0],"phi":o2[2]})
	#t2 = Transform(o2[1],o2[0],o2[2])
	return angular_deviation(t1,t2)

def angular_deviation(t1,t2):

	v1 = Vec3f([0,0,1]*t1)
	v2 = Vec3f([0,0,1]*t2)
	t = v2.dot(v1)
	#print t
	if t > 1: 
		if t > 1.1:
			print "error, the precision is a problem, are things normalized?"
			exit(1)
		t = 1
	if t < -1:
		if t < -1.1:
			print "error, the precision is a problem, are things normalized?"
			exit(1)
		t = -1
				
	angle = acos(t)*180/pi
	
	return angle

def reduce(orienttracedata,sym):
	nn = 0
	for particle in orienttracedata:
		if len(particle) == 0:	continue
		nn += 1
		for orient in particle:
			t = Transform({"type":"eman","az":orient[1],"alt":orient[0],"phi":orient[2]})
			t = sym.reduce(t,0)
			d = t.get_rotation()
			orient[1] = d["az"]
			orient[0] = d["alt"]
			orient[2] = d["phi"]
	
	print "reduced a total of",nn, "orientations"
	touching = sym.get_touching_au_transforms(False)
	
	for particle in orienttracedata:
		if len(particle) == 0:	continue
		n = len(particle)
		for i in range(1,n):
			o1 = particle[i-1]
			o2 = particle[i]
			t1 = Transform({"type":"eman","az":o1[1],"alt":o1[0],"phi":o1[2]})
			t2 = Transform({"type":"eman","az":o2[1],"alt":o2[0],"phi":o2[2]})
		
			angle = angular_deviation(t1,t2)
			
			for t in touching:
				t2 = Transform3D(o2[1],o2[0],o2[2])*t
				
				tmp = angular_deviation(t1,t2)
				
				if tmp < angle:
					angle = tmp
					
					d = t2.get_rotation()
					particle[i][1] = d["az"]
					particle[i][0] = d["alt"]
					particle[i][2] = d["phi"]
	
				
def calc_angular_deviation(orienttracedata):
	
	data = []
	
	for particle in orienttracedata:
		n = len(particle)
		if n <= 1:
			data.append(0)
			continue
		angle = 0
		for i in range(0,n-1):
			o1 = particle[i]
			o2 = particle[i+1]
			t1 = Transform({"type":"eman","az":o1[1],"alt":o1[0],"phi":o1[2]})
			t2 = Transform({"type":"eman","az":o2[1],"alt":o2[0],"phi":o2[2]})
			angle += angular_deviation(t1,t2)

		angle /= (n-1)
		data.append(angle)

	return data

def parsedata(filename,orienttracedata,classtracedata):
	try:
		f=file(filename,'r')
	except:
		print 'couldnt read',filename
		return 0
	lines=f.readlines()

	for line in lines:
		s = str.split(str.strip(line))
		if s[1] == '********':
			fs_idx = s[0].find('.') # fullstop idx
			if fs_idx == -1:
				print "error, the format of the input file is unexpected, couldn't find a number followed by a fullstop in",s[0]
			else:
				idx = s[0][0:fs_idx]
				n = int(idx)+1
				if len(orienttracedata) < n:
					for i in range(len(orienttracedata),n):
						orienttracedata.append([])
				if len(classtracedata) < n:
					for i in range(len(classtracedata),n):
						classtracedata.append([])
		elif s[1] == '->':
			idx = str.find(s[3],',')
			alt = float(s[3][1:idx])
			az = float(s[3][idx+1:len(s[3])-1])
			orienttracedata[n-1].append([alt,az,0])
			cls = int(s[2])
			it = int(s[0])
			classtracedata[n-1].append([it,cls])
					

	
if __name__ == "__main__":
    main()
