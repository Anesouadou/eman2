= Name =
sxmeridien - 3D Refinement: Performs 3D structure refinement.

= Usage =

''usage in command line''

sxmeridien.py  stack  output_directory  initial_volume  --radius=RADIUS  --xr=XR  --ts=TS  --inires=INIRES  --mask3D=MASK3D  --hardmask  --sym=SYM  --skip_prealignment  --initialshifts  --center_method=CENTER_METHOD  --target_radius=TARGET_RADIUS  --delta=DELTA  --shake=SHAKE  --small_memory   --ref_a=REF_A  --ccfpercentage=CCFPERCENTAGE  --nonorm  --do_final=DO_FINAL  --memory_per_node=MEMORY_PER_NODE


=== Typical usage ===

sxmeridien exists only in MPI version.

'''mpirun -np 88 --host n2,n7,n8,n9,n10,n0,n1,n6,n3,n4,n5  sxmeridien.py bdb:data refinementdir outdir_rviper/main001/run007/ref_clip.hdf --radius=28 > cou &'''

Fresh run:

'''mpirun -np 88 --host n2,n7,n8,n9,n10,n0,n1,n6,n3,n4,n5  sxmeridien.py bdb:../stack V-0808-normshake-v1.52  ../ref-viper-scale.hdf --sym=c5  --radius=145  --hardmask --mask3D=../mask.hdf > printoutshake1.52  &'''

Continue run/simple restart:

'''mpirun -np 88 --host n2,n7,n8,n9,n10,n0,n1,n6,n3,n4,n5  sxmeridien.py V-0808-normshake-v1.52 > V-0808-normshake-v1.52/printoutct &'''

Continue run/restart with altered parameters:

'''mpirun -np 88 --host n2,n7,n8,n9,n10,n0,n1,n6,n3,n4,n5  sxmeridien.py V-0808-normshake-v1.52 —-raduis=140 > V-0808-normshake-v1.52/printoutct &'''

Do specified iteration reconstruction:

'''mpirun -np 88 --host n2,n7,n8,n9,n10,n0,n1,n6,n3,n4,n5  sxmeridien.py V-0808-normshake-v1.52 —-do_final=23 > V-0808-normshake-v1.52/printoutct &'''

Just do final reconstruction using the iteration with best resolution:

'''mpirun -np 88 --host n2,n7,n8,n9,n10,n0,n1,n6,n3,n4,n5  sxmeridien.py V-0808-normshake-v1.52 > V-0808-normshake-v1.52/printoutct &'''

== Input ==
    stack:: Input image stack: (default required string)
    initial_volume:: Initial 3D reference: (default required string)

    radius:: Particle radius [Pixels]: Outer radius [in pixels] of particles < int(nx/2)-1 (default -1) 
    mask3D:: 3D mask: Soft mask for the volume. If not given, a hard sphere of radius boxsize/2-1 will be used. (default none)
    hardmask:: Apply hard 2D mask: Apply hard mask to 2D data with the particle radius. (default False)
    sym:: Point-group symmetry: Symmetry of the refined structure. Acceptable values are: cn, dn, where n is multiplicity. (default c1)
    do_final::Perform final reconstruction: Perform final reconstruction using orientation parameters from the specified iteration. By default, it uses iteration achieved best resolution (default -1)
    memory_per_node:: Memory per node [GB]: User provided information about memory per node in GB (NOT per CPU). By default, it uses 2GB * (number of CPUs per node) (default -1.0)

    * The remaining parameters are optional.
    xr:: Search range [Pixels]: Range for translation search in both directions. Search is +/-xr. It can be fractional (default 5.0) 
    ts:: Search step size [Pixels]: Step size of translation search in both directions. Search is within a circle of radius xr on a grid with steps ts. It can be fractional. (default 2.0)
    inires:: Starting resolution [A]: Resolution used to start the refinement. (default 25.0)
    skip_prealignment:: Skip 2D pre-alignment step: Use this option if images are already centered. (default False)
    initialshifts:: Read shifts from header: Start with the shift parameters stored in the image headers. Useful to jumpstart the procedure. (default False)
    center_method:: Centering method: Method for centering averages during initial 2D prealignment of data (0: no centering; -1: average shift method; For 1-7, see center_2D in utilities.py) (default -1)
    target_radius:: Target particle radius: For 2D prealignment, images will be shrank/enlarged to this radius. (default 29)
    delta:: Initial angular sampling step: Initial angular sampling step. (default 15.0)
    shake:: Shake: Shake (default 0.5)
    small_memory:: Do not keep data in memory: Data will not be kept in memory if small_memory is true (default False)
    ref_a::Projection generation method: Method for generating the quasi-uniformly distributed projection directions. S- Saff algorithm, or P - Penczek 1994 algorithm. (default S)
    ccfpercentage::Correlation peaks to be included [%]: Percentage of correlation peaks to be included. 0.0 corresponds to hard matching. (default 99.9)
    nonorm::Skip image norm correction: Do not apply image norm correction. (default False)

== Output ==
    output_directory:: Output directory: (default current directory)


= Description =

= Author / Maintainer =
Pawel A. Penczek

= Keywords =
    category 1:: APPLICATIONS

= Files =
sxmeridien.py

= See also =
References to relevant other routines.

= Maturity =
 alpha:: in development
