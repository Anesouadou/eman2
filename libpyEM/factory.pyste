Include("emdata.h")
Include("filter.h")
Include("util.h")
Include("ctf.h")
Include("xydata.h")
Include("interp.h")

EMObject = Class("EMAN::EMObject", "emobject.h")
set_policy(EMObject.get_emdata, return_internal_reference())
set_policy(EMObject.get_xydata, return_internal_reference())

Factory = Template("EMAN::Factory", "emobject.h")

Aligner = Class("EMAN::Aligner", "aligner.h")
set_policy(Aligner.align, return_value_policy(manage_new_object))

AlignerFactory = Factory("EMAN::Aligner", "AlignerFactory")
set_policy(AlignerFactory.get, return_value_policy(manage_new_object))
set_policy(AlignerFactory.instance, return_value_policy(reference_existing_object))
exclude(AlignerFactory.add)

Cmp = Class("EMAN::Cmp", "cmp.h")

CmpFactory = Factory("EMAN::Cmp", "CmpFactory")
set_policy(CmpFactory.get, return_value_policy(manage_new_object))
set_policy(CmpFactory.instance, return_value_policy(reference_existing_object))
exclude(CmpFactory.add)

Averager = Class("EMAN::Averager", "averager.h")
set_policy(Averager.average, return_value_policy(manage_new_object))

AveragerFactory = Factory("EMAN::Averager", "AveragerFactory")
set_policy(AveragerFactory.get, return_value_policy(manage_new_object))
set_policy(AveragerFactory.instance, return_value_policy(reference_existing_object))
exclude(AveragerFactory.add)

Projector = Class("EMAN::Projector", "projector.h")
set_policy(Projector.project3d, return_value_policy(manage_new_object))

ProjectorFactory = Factory("EMAN::Projector", "ProjectorFactory")
set_policy(ProjectorFactory.get, return_value_policy(manage_new_object))
set_policy(ProjectorFactory.instance, return_value_policy(reference_existing_object))
exclude(ProjectorFactory.add)

Reconstructor = Class("EMAN::Reconstructor", "reconstructor.h")
set_policy(Reconstructor.finish, return_value_policy(manage_new_object))

ReconstructorFactory = Factory("EMAN::Reconstructor", "ReconstructorFactory")
set_policy(ReconstructorFactory.get, return_value_policy(manage_new_object))
set_policy(ReconstructorFactory.instance, return_value_policy(reference_existing_object))
exclude(ReconstructorFactory.add)

